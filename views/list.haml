- # (The MIT License)
- # 
- # Copyright (c) 2018-2025 Yegor Bugayenko
- # 
- # Permission is hereby granted, free of charge, to any person obtaining a copy
- # of this software and associated documentation files (the 'Software'), to deal
- # in the Software without restriction, including without limitation the rights
- # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- # copies of the Software, and to permit persons to whom the Software is
- # furnished to do so, subject to the following conditions:
- # 
- # The above copyright notice and this permission notice shall be included in all
- # copies or substantial portions of the Software.
- # 
- # THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- # SOFTWARE.

%h2
  Lists
  = succeed ':' do
    = "##{list.id}"
  &= list.title

- if list.stop?
  %p.red
    This is the
    %strong STOP
    list! Its recipients will never receive any letters from you.

%p
  %a.item{ onclick: '$("#save").show();' } Edit YAML
  %a.item{ onclick: '$("#add").show();$("#email").focus();' } Add Recipient
  %a.item{ onclick: '$("#find").show();$("#query").focus();' } Find Recipient
  %a.item{ onclick: '$("#upload").show();' } Upload CSV
  %a.item{ onclick: '$("#absorb").show();' } Absorb
  %a.item{ href: iri.cut('/download-recipients').add(id: list.id) } Download CSV
  %a.item{ href: iri.cut('/activate-all').add(id: list.id), onclick: "return confirm('Are you sure? All recipients will be activated in this list!');" } Activate All

%form.hidden{ method: 'POST', action: iri.cut('/save-list'), id: 'save' }
  %fieldset
    %input{ type: 'hidden', name: 'id', value: list.id }
    %label
      %a{ href: 'https://github.com/yegor256/mailanes#list' } YAML
      config:
    %textarea{ name: 'yaml', style: 'width:100%;height:12em;', required: 'true' }= list.yaml.to_yaml
    %input{ type: 'submit', value: 'Save' }

%form.hidden{ method: 'POST', action: iri.cut('/add-recipient'), id: 'add' }
  %input{ type: 'hidden', name: 'id', value: list.id }
  %input{ type: 'text', name: 'email', id: 'email', placeholder: 'Email', size: 20, required: 'true', autocomplete: 'off' }
  %input{ type: 'text', name: 'first', placeholder: 'First name', size: 14, autocomplete: 'off' }
  %input{ type: 'text', name: 'last', placeholder: 'Last name', size: 16, autocomplete: 'off' }
  %input{ type: 'submit', value: 'Add Recipient' }

%form.hidden{ method: 'GET', action: iri.cut('/list'), id: 'find' }
  %input{ type: 'hidden', name: 'id', value: list.id }
  %input{ type: 'text', name: 'query', id: 'query', placeholder: 'Email or name to find...', size: 32, required: 'true', autocomplete: 'off', value: (params[:query] || nil) }
  %input{ type: 'submit', value: 'Find' }
  %label.small.gray Start with '=' if you are looking for an exact match.

%form.hidden{ method: 'POST', action: iri.cut('/absorb'), id: 'absorb' }
  %input{ type: 'hidden', name: 'id', value: list.id }
  %select{ name: 'list' }
    - lists.all.each do |list|
      %option{ value: list.id }= "##{list.id}: #{list.title}"
  %input{ type: 'checkbox', name: 'dry', value: 'dry' }
  %label Dry run
  %input{ type: 'submit', value: 'Absorb' }
  %label.small.gray
    All emails from the selected list, which also exist in the
    current list, will migrate here. Only the duplicates will move.
    All other recipients will stay untouched.

%form.hidden{ method: 'POST', action: iri.cut('/upload-recipients'), id: 'upload', enctype: 'multipart/form-data' }
  %input{ type: 'hidden', name: 'id', value: list.id }
  %input{ name: 'file', type: 'file', accept: 'text/plain' }
  %input{ type: 'submit', value: 'Upload' }
  %br
  %label.small.gray
    Make sure it's a headerless CSV file,
    with an email in the first column,
    first name in the second,
    and the last name in the third one.
    The forth column may contain a semi-colon separated list of deliveries, which
    we will create right after adding the recipient,
    for example "3/88" (campaign ID, letter ID).

%p
  Created:
  = list.created.utc.iso8601
  = "(#{Ago.new(list.created)})"

%p
  It grows by
  = list.recipients.per_day(10)
  per day (last 10 days statistics).
  This is your
  %a{ href: iri.cut('/weeks').add(id: list.id) } weekly contribution
  summary.

%p
  The link to share:
  %a{ href: "https://www.mailanes.com/add?list=#{list.id}" }
    = "https://www.mailanes.com/add?list=#{list.id}"

%p
  Participates in:
  - if campaigns.empty?
    %span.red no campaigns
  - else
    - campaigns.each do |c|
      = succeed ':' do
        %a{ href: iri.cut('/campaign').add(id: c.id) }= "C##{c.id}"
        = '/'
        %a{ href: iri.cut('/lane').add(id: c.lane.id) }= "L##{c.lane.id}"
      &= "\"#{c.lane.title}\""

- unless abs.empty?
  %p
    There are
    %span.red= abs.map { |a| a[:total] }.inject(&:+)
    duplicates
    in the following lists:
  %ul
    - abs.each do |a|
      %li
        %span.red= a[:total]
        in
        %a{ href: iri.cut('/list').add(id: a[:list].id) }= "##{a[:list].id}"
        &= a[:list].title

%p
  Delivered
  = list.deliveries_count
  emails.
  Bounce rate:
  = succeed '.' do
    %span{ class: (rate > 0.05 ? 'red' : '') }= "#{(rate * 100).round(2)}%"

%p
  There are
  = total
  recipient(s),
  = active
  = "(#{total.zero? ? 0 : 100 * active / total}%)"
  are active,
  - opened = list.opened_count
  - if opened.zero?
    no emails opened yet
  - else
    = opened
    = "(#{total.zero? ? 0 : 100 * opened / total}%)"
    read their emails:

%p
  - list.recipients.all(query: params[:query] || '').each do |r|
    %span{ class: ('cross' unless r.active?) }<
      %a{ href: iri.cut('/recipient').add(id: r.id) }<
        = r.email
